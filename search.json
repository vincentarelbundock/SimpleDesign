[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SimpleDesign",
    "section": "",
    "text": "A simple package to simulate and diagnose research designs:\n\nSimulate\nFit\nDiagnose\n\nBias\nRMSE\nPower\nCoverage\n\n\nThis is strongly influenced by the amazing DeclareDesign package.\nWarning: This was just a quick Saturday morning project to see if I could roll my own simple solution. Nobody should use this for serious work.\n\n\nFirst, we load the package and define a dgp() function that encodes a simple data generating process (DGP): A two-arm randomized controlled trial with \\(N=100\\) observations, an outcome \\(Y\\), a random treatment \\(T\\), and a treatment effect of \\(\\theta=0.5\\).\nThe dgp() function must return a data frame when called. That data frame must also have a “truth” attribute, which holds the true value of the estimand that we are targetting.\n\nlibrary(SimpleDesign)\n\ndgp = function(theta = 0.5, N = 50) {\n  T = rbinom(N, 1, .5) # treatment\n  e = rnorm(N) # noise\n  Y = theta * T + e # outcome\n\n  # output data frame\n  data = data.frame(Y, T)\n\n  # set the \"truth\" attribute\n  attr(data, \"truth\") = theta\n  return(data)\n}\n\ndgp() |&gt; head()\n\n            Y T\n1 -0.37302813 0\n2 -1.14314590 1\n3  0.63552187 0\n4 -1.15922120 1\n5 -0.34179292 1\n6 -0.04156007 0\n\n\nNext, we define a fit() function. This function accepts a data frame, fits a model, and returns a data frame of estimates. That data frame must absolutely include an estimate column with numeric values.\n\nfit = function(data) {\n  model = lm(Y ~ T, data = data)\n  results = data.frame(\n    estimator = \"OLS\",\n    estimate = coef(model)[\"T\"]\n  )\n  return(results)\n}\n\ndgp() |&gt; fit()\n\n  estimator  estimate\nT       OLS 0.5859094\n\n\nFinally, we feed both the dgp() and the fit() functions to the diagnose() function. This function will simulate data from the dgp() function, fit models using the fit() function, and return a data frame with diagnostic statistics. The truth attribute of the generated data specifies the true value of the quantity of interest, against which we benchmark estimates.\n\ndiagnose(dgp, fit)\n\n  estimator truth       bias      rmse\n1       OLS   0.5 0.01775981 0.2569797\n\n\nThe fit() function can also produce data frames with additional columns like conf.low, conf.high, and p.values. When those columns are present, diagnose() will generate more useful diagnostic statistics.\nExtracting that information from models is relatively easy, but it is inconvenient. To make this process easier, SimpleDesign supplies the tidy_estimator() function. The mandatory label argument adds a new column with a unique label. The optional term argument specifies the subset of parameters to extract from the model.\n\nfit = function(data) {\n  model = lm(Y ~ T, data = data)\n  results = tidy_estimator(model, label = \"OLS\", term = \"T\")\n  return(results)\n}\n\ndgp() |&gt; fit()\n\n  estimator term  estimate   p.value   conf.low conf.high\n2       OLS    T 0.5012431 0.1422529 -0.1682288  1.170715\n\n\nSince the fit() output now includes the \\(p\\) value and confidence interval, diagnose() now reports more useful statistics.\n\ndiagnose(dgp, fit)\n\n  estimator term truth         bias      rmse power coverage\n1       OLS    T   0.5 -0.001086504 0.2776061  0.37     0.92\n\n\n\n\n\nThe dgp() function has two arguments to control the sample and effect sizes. We can diagnose several research designs in one go by supplying a data frame of DGP parameters to the dgp_parameters argument of diagnose(). In this example, we use the expand.grid() function from base R to build a data frame with all combinations of parameter values.\n\nparam = expand.grid(N = c(100, 500), theta = c(0.1, 0.5, 1))\nparam\n\n    N theta\n1 100   0.1\n2 500   0.1\n3 100   0.5\n4 500   0.5\n5 100   1.0\n6 500   1.0\n\ndiagnose(dgp, fit, N = 100, dgp_parameters = param)\n\n  estimator term truth   N theta         bias       rmse power coverage\n1       OLS    T   0.1 100   0.1 -0.000039723 0.17967811  0.07     0.99\n2       OLS    T   0.1 500   0.1  0.007538356 0.09246109  0.23     0.92\n3       OLS    T   0.5 100   0.5  0.052107175 0.20274188  0.84     0.94\n4       OLS    T   0.5 500   0.5  0.005333471 0.08670184  1.00     0.96\n5       OLS    T   1.0 100   1.0  0.010563482 0.21025858  1.00     0.95\n6       OLS    T   1.0 500   1.0  0.003589011 0.08514632  1.00     0.96\n\n\n\n\n\nSince dgp() is just a standard R function, users are free to define complex data generating processes using whatever helper functions they wish. For example, the fabricatr and randomizr packages offer extremely powerful functions to generate simulated data with special random assignment schemes. For example, this dgp() generates data from a block random assignment design.\n\ndgp = function(n_blocks = 3, n_indiv = 100, e_sd = 1) {\n  data = fabricatr::fabricate(\n    # block-level variables\n    block = fabricatr::add_level(\n      N = n_blocks,\n\n      # individual treatment effect\n      tau = c(4, 2, 0)\n    ),\n\n    # individual-level variables\n    indiv = fabricatr::add_level(\n      N = n_indiv,\n\n      # noise\n      e = rnorm(N, sd = e_sd),\n\n      # potential outcomes\n      Y_T_0 = e,\n      Y_T_1 = e + tau\n    )\n  )\n  data$T = randomizr::block_ra(blocks = data$block, block_prob = c(.5, .7, .9))\n  data$Y = ifelse(data$T == 1, data$Y_T_1, data$Y_T_0)\n\n  # define truth in terms of potential outcomes\n  attr(data, \"truth\") = mean(data$Y_T_1 - data$Y_T_0)\n\n  return(data)\n}\n\ndgp() |&gt; head()\n\n  block tau indiv          e      Y_T_0    Y_T_1 T          Y\n1     1   4   001  1.0472749  1.0472749 5.047275 1  5.0472749\n2     1   4   002 -0.4902355 -0.4902355 3.509765 0 -0.4902355\n3     1   4   003  2.1545182  2.1545182 6.154518 0  2.1545182\n4     1   4   004  0.9860548  0.9860548 4.986055 0  0.9860548\n5     1   4   005  1.4483193  1.4483193 5.448319 0  1.4483193\n6     1   4   006  0.7895540  0.7895540 4.789554 1  4.7895540\n\ndgp() |&gt; attr(\"truth\")\n\n[1] 2\n\n\nNow, we define a fit function to see if a “naive” linear regression model retrieves a good estimate of the estimand.\n\nfit = function(data) {\n  model = lm(Y ~ T, data = data)\n  results = tidy_estimator(model, label = \"Naive LM\", term = \"T\")\n  return(results)\n}\n\nFinally, we diagnose the research design.\n\ndiagnose(dgp, fit)\n\n  estimator term truth      bias      rmse power coverage\n1  Naive LM    T     2 -0.386235 0.4063862     1     0.62\n\n\n\n\n\nPerhaps we should switch estimators. As described on the DeclareDesign blog, we could try to control for blocks fixed effects in the linear model, or estimate differences-in-means in each group and then average them. That last option is implemented by the differences_in_means() function from the estimatr package.\nInstead of using the tidy_estimator() helper function, we use tidy_estimator_list(). This function accepts a named list of models, and returns a simple data frame with appropriate labels. To illustrate, let’s simulate a single dataset, store three fitted models in a named list, and call tidy_estimator_list(). For fun, we also set the \\(\\alpha\\) level used to build confidence intervals to 0.01.\n\ndata = dgp()\nresults = list(\n  \"Naive LM\" = lm(Y ~ T, data = data),\n  \"Block controls\" = lm(Y ~ T + block, data = data),\n  \"DinM\" = estimatr::difference_in_means(Y ~ T, blocks = block, data = data)\n)\ntidy_estimator_list(results, term = \"T\", alpha = 0.01)\n\n       estimator term estimate      p.value conf.low conf.high\n1       Naive LM    T 1.688476 2.062754e-16 1.159268  2.217683\n2 Block controls    T 2.628537 1.708860e-63 2.226028  3.031047\n3           DinM    T 2.071378 9.103336e-57 1.735331  2.407425\n\n\nUsing this helper function, we can define a new fit() and compare different modelling strategies:\n\nfit = function(data) {\n  model = lm(Y ~ T, data = data)\n  results = list(\n    \"Naive LM\" = lm(Y ~ T, data = data),\n    \"Block controls\" = lm(Y ~ T + block, data = data),\n    \"DinM\" = estimatr::difference_in_means(Y ~ T, blocks = block, data = data)\n  )\n  results = tidy_estimator_list(results, term = \"T\", alpha = 0.01)\n  return(results)\n}\ndiagnose(dgp, fit)\n\n       estimator term truth         bias      rmse power coverage\n1 Block controls    T     2  0.579808242 0.5948968     1     0.10\n2           DinM    T     2 -0.006437012 0.1472254     1     0.99\n3       Naive LM    T     2 -0.383467860 0.4036736     1     0.88\n\n\nThese results show that the difference-in-means strategy yields unbiased results with adequate coverage. We could extend our investigation to consider different DGP parameters:\n\nparam = expand.grid(n_indiv = c(100, 500), e_sd = c(1, 2))\n\ndiagnose(dgp, fit, dgp_parameters = param)\n\n        estimator term truth n_indiv e_sd          bias       rmse power coverage\n1  Block controls    T     2     100    1  0.5900080579 0.60494390     1     0.07\n2  Block controls    T     2     100    2  0.5514600278 0.60759485     1     0.78\n3  Block controls    T     2     500    1  0.5740810393 0.57671783     1     0.00\n4  Block controls    T     2     500    2  0.5848918067 0.59858053     1     0.00\n5            DinM    T     2     100    1  0.0009265808 0.13423367     1     1.00\n6            DinM    T     2     100    2 -0.0136474020 0.31326195     1     0.98\n7            DinM    T     2     500    1 -0.0140148171 0.06272271     1     1.00\n8            DinM    T     2     500    2 -0.0028456426 0.13729211     1     0.99\n9        Naive LM    T     2     100    1 -0.3788130041 0.39582041     1     0.94\n10       Naive LM    T     2     100    2 -0.4028174998 0.46559315     1     0.94\n11       Naive LM    T     2     500    1 -0.3872243800 0.39076056     1     0.01\n12       Naive LM    T     2     500    2 -0.3759156865 0.39481790     1     0.39"
  },
  {
    "objectID": "index.html#simple-data-generating-process",
    "href": "index.html#simple-data-generating-process",
    "title": "SimpleDesign",
    "section": "",
    "text": "First, we load the package and define a dgp() function that encodes a simple data generating process (DGP): A two-arm randomized controlled trial with \\(N=100\\) observations, an outcome \\(Y\\), a random treatment \\(T\\), and a treatment effect of \\(\\theta=0.5\\).\nThe dgp() function must return a data frame when called. That data frame must also have a “truth” attribute, which holds the true value of the estimand that we are targetting.\n\nlibrary(SimpleDesign)\n\ndgp = function(theta = 0.5, N = 50) {\n  T = rbinom(N, 1, .5) # treatment\n  e = rnorm(N) # noise\n  Y = theta * T + e # outcome\n\n  # output data frame\n  data = data.frame(Y, T)\n\n  # set the \"truth\" attribute\n  attr(data, \"truth\") = theta\n  return(data)\n}\n\ndgp() |&gt; head()\n\n            Y T\n1 -0.37302813 0\n2 -1.14314590 1\n3  0.63552187 0\n4 -1.15922120 1\n5 -0.34179292 1\n6 -0.04156007 0\n\n\nNext, we define a fit() function. This function accepts a data frame, fits a model, and returns a data frame of estimates. That data frame must absolutely include an estimate column with numeric values.\n\nfit = function(data) {\n  model = lm(Y ~ T, data = data)\n  results = data.frame(\n    estimator = \"OLS\",\n    estimate = coef(model)[\"T\"]\n  )\n  return(results)\n}\n\ndgp() |&gt; fit()\n\n  estimator  estimate\nT       OLS 0.5859094\n\n\nFinally, we feed both the dgp() and the fit() functions to the diagnose() function. This function will simulate data from the dgp() function, fit models using the fit() function, and return a data frame with diagnostic statistics. The truth attribute of the generated data specifies the true value of the quantity of interest, against which we benchmark estimates.\n\ndiagnose(dgp, fit)\n\n  estimator truth       bias      rmse\n1       OLS   0.5 0.01775981 0.2569797\n\n\nThe fit() function can also produce data frames with additional columns like conf.low, conf.high, and p.values. When those columns are present, diagnose() will generate more useful diagnostic statistics.\nExtracting that information from models is relatively easy, but it is inconvenient. To make this process easier, SimpleDesign supplies the tidy_estimator() function. The mandatory label argument adds a new column with a unique label. The optional term argument specifies the subset of parameters to extract from the model.\n\nfit = function(data) {\n  model = lm(Y ~ T, data = data)\n  results = tidy_estimator(model, label = \"OLS\", term = \"T\")\n  return(results)\n}\n\ndgp() |&gt; fit()\n\n  estimator term  estimate   p.value   conf.low conf.high\n2       OLS    T 0.5012431 0.1422529 -0.1682288  1.170715\n\n\nSince the fit() output now includes the \\(p\\) value and confidence interval, diagnose() now reports more useful statistics.\n\ndiagnose(dgp, fit)\n\n  estimator term truth         bias      rmse power coverage\n1       OLS    T   0.5 -0.001086504 0.2776061  0.37     0.92"
  },
  {
    "objectID": "index.html#dgp-parameters",
    "href": "index.html#dgp-parameters",
    "title": "SimpleDesign",
    "section": "",
    "text": "The dgp() function has two arguments to control the sample and effect sizes. We can diagnose several research designs in one go by supplying a data frame of DGP parameters to the dgp_parameters argument of diagnose(). In this example, we use the expand.grid() function from base R to build a data frame with all combinations of parameter values.\n\nparam = expand.grid(N = c(100, 500), theta = c(0.1, 0.5, 1))\nparam\n\n    N theta\n1 100   0.1\n2 500   0.1\n3 100   0.5\n4 500   0.5\n5 100   1.0\n6 500   1.0\n\ndiagnose(dgp, fit, N = 100, dgp_parameters = param)\n\n  estimator term truth   N theta         bias       rmse power coverage\n1       OLS    T   0.1 100   0.1 -0.000039723 0.17967811  0.07     0.99\n2       OLS    T   0.1 500   0.1  0.007538356 0.09246109  0.23     0.92\n3       OLS    T   0.5 100   0.5  0.052107175 0.20274188  0.84     0.94\n4       OLS    T   0.5 500   0.5  0.005333471 0.08670184  1.00     0.96\n5       OLS    T   1.0 100   1.0  0.010563482 0.21025858  1.00     0.95\n6       OLS    T   1.0 500   1.0  0.003589011 0.08514632  1.00     0.96"
  },
  {
    "objectID": "index.html#complex-data-generating-process",
    "href": "index.html#complex-data-generating-process",
    "title": "SimpleDesign",
    "section": "",
    "text": "Since dgp() is just a standard R function, users are free to define complex data generating processes using whatever helper functions they wish. For example, the fabricatr and randomizr packages offer extremely powerful functions to generate simulated data with special random assignment schemes. For example, this dgp() generates data from a block random assignment design.\n\ndgp = function(n_blocks = 3, n_indiv = 100, e_sd = 1) {\n  data = fabricatr::fabricate(\n    # block-level variables\n    block = fabricatr::add_level(\n      N = n_blocks,\n\n      # individual treatment effect\n      tau = c(4, 2, 0)\n    ),\n\n    # individual-level variables\n    indiv = fabricatr::add_level(\n      N = n_indiv,\n\n      # noise\n      e = rnorm(N, sd = e_sd),\n\n      # potential outcomes\n      Y_T_0 = e,\n      Y_T_1 = e + tau\n    )\n  )\n  data$T = randomizr::block_ra(blocks = data$block, block_prob = c(.5, .7, .9))\n  data$Y = ifelse(data$T == 1, data$Y_T_1, data$Y_T_0)\n\n  # define truth in terms of potential outcomes\n  attr(data, \"truth\") = mean(data$Y_T_1 - data$Y_T_0)\n\n  return(data)\n}\n\ndgp() |&gt; head()\n\n  block tau indiv          e      Y_T_0    Y_T_1 T          Y\n1     1   4   001  1.0472749  1.0472749 5.047275 1  5.0472749\n2     1   4   002 -0.4902355 -0.4902355 3.509765 0 -0.4902355\n3     1   4   003  2.1545182  2.1545182 6.154518 0  2.1545182\n4     1   4   004  0.9860548  0.9860548 4.986055 0  0.9860548\n5     1   4   005  1.4483193  1.4483193 5.448319 0  1.4483193\n6     1   4   006  0.7895540  0.7895540 4.789554 1  4.7895540\n\ndgp() |&gt; attr(\"truth\")\n\n[1] 2\n\n\nNow, we define a fit function to see if a “naive” linear regression model retrieves a good estimate of the estimand.\n\nfit = function(data) {\n  model = lm(Y ~ T, data = data)\n  results = tidy_estimator(model, label = \"Naive LM\", term = \"T\")\n  return(results)\n}\n\nFinally, we diagnose the research design.\n\ndiagnose(dgp, fit)\n\n  estimator term truth      bias      rmse power coverage\n1  Naive LM    T     2 -0.386235 0.4063862     1     0.62"
  },
  {
    "objectID": "index.html#comparing-estimators",
    "href": "index.html#comparing-estimators",
    "title": "SimpleDesign",
    "section": "",
    "text": "Perhaps we should switch estimators. As described on the DeclareDesign blog, we could try to control for blocks fixed effects in the linear model, or estimate differences-in-means in each group and then average them. That last option is implemented by the differences_in_means() function from the estimatr package.\nInstead of using the tidy_estimator() helper function, we use tidy_estimator_list(). This function accepts a named list of models, and returns a simple data frame with appropriate labels. To illustrate, let’s simulate a single dataset, store three fitted models in a named list, and call tidy_estimator_list(). For fun, we also set the \\(\\alpha\\) level used to build confidence intervals to 0.01.\n\ndata = dgp()\nresults = list(\n  \"Naive LM\" = lm(Y ~ T, data = data),\n  \"Block controls\" = lm(Y ~ T + block, data = data),\n  \"DinM\" = estimatr::difference_in_means(Y ~ T, blocks = block, data = data)\n)\ntidy_estimator_list(results, term = \"T\", alpha = 0.01)\n\n       estimator term estimate      p.value conf.low conf.high\n1       Naive LM    T 1.688476 2.062754e-16 1.159268  2.217683\n2 Block controls    T 2.628537 1.708860e-63 2.226028  3.031047\n3           DinM    T 2.071378 9.103336e-57 1.735331  2.407425\n\n\nUsing this helper function, we can define a new fit() and compare different modelling strategies:\n\nfit = function(data) {\n  model = lm(Y ~ T, data = data)\n  results = list(\n    \"Naive LM\" = lm(Y ~ T, data = data),\n    \"Block controls\" = lm(Y ~ T + block, data = data),\n    \"DinM\" = estimatr::difference_in_means(Y ~ T, blocks = block, data = data)\n  )\n  results = tidy_estimator_list(results, term = \"T\", alpha = 0.01)\n  return(results)\n}\ndiagnose(dgp, fit)\n\n       estimator term truth         bias      rmse power coverage\n1 Block controls    T     2  0.579808242 0.5948968     1     0.10\n2           DinM    T     2 -0.006437012 0.1472254     1     0.99\n3       Naive LM    T     2 -0.383467860 0.4036736     1     0.88\n\n\nThese results show that the difference-in-means strategy yields unbiased results with adequate coverage. We could extend our investigation to consider different DGP parameters:\n\nparam = expand.grid(n_indiv = c(100, 500), e_sd = c(1, 2))\n\ndiagnose(dgp, fit, dgp_parameters = param)\n\n        estimator term truth n_indiv e_sd          bias       rmse power coverage\n1  Block controls    T     2     100    1  0.5900080579 0.60494390     1     0.07\n2  Block controls    T     2     100    2  0.5514600278 0.60759485     1     0.78\n3  Block controls    T     2     500    1  0.5740810393 0.57671783     1     0.00\n4  Block controls    T     2     500    2  0.5848918067 0.59858053     1     0.00\n5            DinM    T     2     100    1  0.0009265808 0.13423367     1     1.00\n6            DinM    T     2     100    2 -0.0136474020 0.31326195     1     0.98\n7            DinM    T     2     500    1 -0.0140148171 0.06272271     1     1.00\n8            DinM    T     2     500    2 -0.0028456426 0.13729211     1     0.99\n9        Naive LM    T     2     100    1 -0.3788130041 0.39582041     1     0.94\n10       Naive LM    T     2     100    2 -0.4028174998 0.46559315     1     0.94\n11       Naive LM    T     2     500    1 -0.3872243800 0.39076056     1     0.01\n12       Naive LM    T     2     500    2 -0.3759156865 0.39481790     1     0.39"
  },
  {
    "objectID": "man/tidy_estimator_list.html",
    "href": "man/tidy_estimator_list.html",
    "title": "SimpleDesign",
    "section": "",
    "text": "This function applies ‘tidy_estimator’ to a named list of models, extracting and tidying results for each model and combining them into a single data frame.\n\n\n\ntidy_estimator_list(\n  model_list,\n  vcov = NULL,\n  alpha = 0.05,\n  null = 0,\n  term = NULL\n)\n\n\n\n\n\n\n\nmodel_list\n\n\nA named list of fitted model objects. Each model is passed to ‘tidy_estimator’.\n\n\n\n\nvcov\n\n\nAn optional variance-covariance matrix or a function to compute it. Passed to ‘tidy_estimator’.\n\n\n\n\nalpha\n\n\nA numeric value between 0 and 1 specifying the significance level for confidence intervals (default is 0.05).\n\n\n\n\nnull\n\n\nA numeric value representing the null hypothesis for the parameter estimates (default is 0).\n\n\n\n\nterm\n\n\nAn optional character vector of terms to filter the output. If specified, only rows with matching terms are returned.\n\n\n\n\n\n\nA data frame combining the tidied results from all models in the list. Columns include:\n\n\nestimator\n\n\nThe label for the estimator (corresponding to the list names).\n\n\nterm\n\n\nThe name of the parameter (e.g., model term).\n\n\nestimate\n\n\nThe estimated value of the parameter.\n\n\np.value\n\n\nThe p-value for the hypothesis test of the parameter.\n\n\nconf.low\n\n\nThe lower bound of the confidence interval.\n\n\nconf.high\n\n\nThe upper bound of the confidence interval.\n\n\n\n\n\n\nlibrary(\"SimpleDesign\")\n\nlibrary(SimpleDesign)\nmodel1 &lt;- lm(mpg ~ wt, data = mtcars)\nmodel2 &lt;- lm(mpg ~ disp, data = mtcars)\nmodels &lt;- list(OLS_wt = model1, OLS_disp = model2)\ntidy_estimator_list(models, alpha = 0.05, null = 0)\n\n  estimator        term    estimate       p.value    conf.low  conf.high\n1    OLS_wt (Intercept) 37.28512617  9.477721e-88 33.60504421 40.9652081\n2    OLS_wt          wt -5.34447157  1.188493e-21 -6.44028949 -4.2486537\n3  OLS_disp (Intercept) 29.59985476 5.104094e-128 27.18964880 32.0100607\n4  OLS_disp        disp -0.04121512  2.188058e-18 -0.05045014 -0.0319801",
    "crumbs": [
      "Reference",
      "tidy_estimator_list"
    ]
  },
  {
    "objectID": "man/tidy_estimator_list.html#tidy-results-from-a-list-of-estimators",
    "href": "man/tidy_estimator_list.html#tidy-results-from-a-list-of-estimators",
    "title": "SimpleDesign",
    "section": "",
    "text": "This function applies ‘tidy_estimator’ to a named list of models, extracting and tidying results for each model and combining them into a single data frame.\n\n\n\ntidy_estimator_list(\n  model_list,\n  vcov = NULL,\n  alpha = 0.05,\n  null = 0,\n  term = NULL\n)\n\n\n\n\n\n\n\nmodel_list\n\n\nA named list of fitted model objects. Each model is passed to ‘tidy_estimator’.\n\n\n\n\nvcov\n\n\nAn optional variance-covariance matrix or a function to compute it. Passed to ‘tidy_estimator’.\n\n\n\n\nalpha\n\n\nA numeric value between 0 and 1 specifying the significance level for confidence intervals (default is 0.05).\n\n\n\n\nnull\n\n\nA numeric value representing the null hypothesis for the parameter estimates (default is 0).\n\n\n\n\nterm\n\n\nAn optional character vector of terms to filter the output. If specified, only rows with matching terms are returned.\n\n\n\n\n\n\nA data frame combining the tidied results from all models in the list. Columns include:\n\n\nestimator\n\n\nThe label for the estimator (corresponding to the list names).\n\n\nterm\n\n\nThe name of the parameter (e.g., model term).\n\n\nestimate\n\n\nThe estimated value of the parameter.\n\n\np.value\n\n\nThe p-value for the hypothesis test of the parameter.\n\n\nconf.low\n\n\nThe lower bound of the confidence interval.\n\n\nconf.high\n\n\nThe upper bound of the confidence interval.\n\n\n\n\n\n\nlibrary(\"SimpleDesign\")\n\nlibrary(SimpleDesign)\nmodel1 &lt;- lm(mpg ~ wt, data = mtcars)\nmodel2 &lt;- lm(mpg ~ disp, data = mtcars)\nmodels &lt;- list(OLS_wt = model1, OLS_disp = model2)\ntidy_estimator_list(models, alpha = 0.05, null = 0)\n\n  estimator        term    estimate       p.value    conf.low  conf.high\n1    OLS_wt (Intercept) 37.28512617  9.477721e-88 33.60504421 40.9652081\n2    OLS_wt          wt -5.34447157  1.188493e-21 -6.44028949 -4.2486537\n3  OLS_disp (Intercept) 29.59985476 5.104094e-128 27.18964880 32.0100607\n4  OLS_disp        disp -0.04121512  2.188058e-18 -0.05045014 -0.0319801",
    "crumbs": [
      "Reference",
      "tidy_estimator_list"
    ]
  },
  {
    "objectID": "man/tidy_estimator.html",
    "href": "man/tidy_estimator.html",
    "title": "SimpleDesign",
    "section": "",
    "text": "This function tidies the results from a statistical model, extracting key metrics such as the estimate, confidence intervals, and p-values. It also allows specifying a label for the estimator and filtering by terms.\n\n\n\ntidy_estimator(\n  model,\n  label = NULL,\n  vcov = NULL,\n  alpha = 0.05,\n  null = 0,\n  term = NULL\n)\n\n\n\n\n\n\n\nmodel\n\n\nA fitted model object. This object is passed to the ‘marginaleffects::hypotheses’ function.\n\n\n\n\nlabel\n\n\nA character string specifying a label for the estimator. This label is added to the output as a column.\n\n\n\n\nvcov\n\n\nAn optional variance-covariance matrix or a function to compute it. Passed to ‘marginaleffects::hypotheses’.\n\n\n\n\nalpha\n\n\nA numeric value between 0 and 1 specifying the significance level for confidence intervals (default is 0.05).\n\n\n\n\nnull\n\n\nA numeric value representing the null hypothesis for the parameter estimates (default is 0).\n\n\n\n\nterm\n\n\nAn optional character vector of terms to filter the output. If specified, only rows with matching terms are returned.\n\n\n\n\n\n\nA data frame containing tidied results with columns:\n\n\nestimator\n\n\nThe label for the estimator, as specified by the ‘label’ parameter.\n\n\nterm\n\n\nThe name of the parameter (e.g., model term).\n\n\nestimate\n\n\nThe estimated value of the parameter.\n\n\np.value\n\n\nThe p-value for the hypothesis test of the parameter.\n\n\nconf.low\n\n\nThe lower bound of the confidence interval.\n\n\nconf.high\n\n\nThe upper bound of the confidence interval.\n\n\n\n\n\n\nlibrary(\"SimpleDesign\")\n\nlibrary(SimpleDesign)\nmodel &lt;- lm(mpg ~ wt, data = mtcars)\ntidy_estimator(model, label = \"OLS\", alpha = 0.05, null = 0)\n\n  estimator        term  estimate      p.value  conf.low conf.high\n1       OLS (Intercept) 37.285126 9.477721e-88 33.605044 40.965208\n2       OLS          wt -5.344472 1.188493e-21 -6.440289 -4.248654",
    "crumbs": [
      "Reference",
      "tidy_estimator"
    ]
  },
  {
    "objectID": "man/tidy_estimator.html#extract-and-tidy-estimator-results",
    "href": "man/tidy_estimator.html#extract-and-tidy-estimator-results",
    "title": "SimpleDesign",
    "section": "",
    "text": "This function tidies the results from a statistical model, extracting key metrics such as the estimate, confidence intervals, and p-values. It also allows specifying a label for the estimator and filtering by terms.\n\n\n\ntidy_estimator(\n  model,\n  label = NULL,\n  vcov = NULL,\n  alpha = 0.05,\n  null = 0,\n  term = NULL\n)\n\n\n\n\n\n\n\nmodel\n\n\nA fitted model object. This object is passed to the ‘marginaleffects::hypotheses’ function.\n\n\n\n\nlabel\n\n\nA character string specifying a label for the estimator. This label is added to the output as a column.\n\n\n\n\nvcov\n\n\nAn optional variance-covariance matrix or a function to compute it. Passed to ‘marginaleffects::hypotheses’.\n\n\n\n\nalpha\n\n\nA numeric value between 0 and 1 specifying the significance level for confidence intervals (default is 0.05).\n\n\n\n\nnull\n\n\nA numeric value representing the null hypothesis for the parameter estimates (default is 0).\n\n\n\n\nterm\n\n\nAn optional character vector of terms to filter the output. If specified, only rows with matching terms are returned.\n\n\n\n\n\n\nA data frame containing tidied results with columns:\n\n\nestimator\n\n\nThe label for the estimator, as specified by the ‘label’ parameter.\n\n\nterm\n\n\nThe name of the parameter (e.g., model term).\n\n\nestimate\n\n\nThe estimated value of the parameter.\n\n\np.value\n\n\nThe p-value for the hypothesis test of the parameter.\n\n\nconf.low\n\n\nThe lower bound of the confidence interval.\n\n\nconf.high\n\n\nThe upper bound of the confidence interval.\n\n\n\n\n\n\nlibrary(\"SimpleDesign\")\n\nlibrary(SimpleDesign)\nmodel &lt;- lm(mpg ~ wt, data = mtcars)\ntidy_estimator(model, label = \"OLS\", alpha = 0.05, null = 0)\n\n  estimator        term  estimate      p.value  conf.low conf.high\n1       OLS (Intercept) 37.285126 9.477721e-88 33.605044 40.965208\n2       OLS          wt -5.344472 1.188493e-21 -6.440289 -4.248654",
    "crumbs": [
      "Reference",
      "tidy_estimator"
    ]
  },
  {
    "objectID": "man/diagnose.html",
    "href": "man/diagnose.html",
    "title": "SimpleDesign",
    "section": "",
    "text": "#’ Diagnose a Statistical Model and Data Generating Process\n\n\n\ndiagnose(dgp, fit, alpha = 0.05, N = 100, dgp_parameters = NULL)\n\n\n\n\n\n\n\ndgp\n\n\nA function that generates a dataset. This function should return a data frame when called, and optionally accept parameters passed via ‘dgp_parameters’.\n\n\n\n\nfit\n\n\nA function that fits the model to the data generated by ‘dgp’. This function should return a data frame with columns including ‘estimator’, ‘term’, ‘estimate’, and optionally ‘p.value’, ‘conf.low’, and ‘conf.high’.\n\n\n\n\nalpha\n\n\nA numeric value between 0 and 1 indicating the significance level for hypothesis tests (default is 0.05).\n\n\n\n\nN\n\n\nAn integer specifying the number of repetitions of the simulation to perform (default is 100).\n\n\n\n\ndgp_parameters\n\n\nAn optional data frame specifying parameter values to be passed to the ‘dgp’ function. Each row corresponds to a parameter configuration for a single DGP run. If ‘NULL’, the ‘dgp’ function is called without additional parameters.\n\n\n\n\ntruth\n\n\nA numeric value representing the true value of the parameter being estimated. This is used to compute bias, RMSE, and coverage.\n\n\n\n\n\n\nThis function evaluates the performance of a statistical model (or estimator) against data generated from a specified data generating process (DGP). It computes various diagnostic metrics, including root mean squared error (RMSE), bias, power, and confidence interval coverage.\nThe function assumes that the ‘fit’ function returns a data frame containing at least the following columns: - ‘estimator’: Identifier for the model or method. - ‘term’: The name of the parameter being estimated. - ‘estimate’: The estimated value of the parameter.\nAdditional columns such as ‘p.value’, ‘conf.low’, and ‘conf.high’ are used for computing power and coverage metrics if they are present.\nThe ‘dgp_parameters’ argument allows for systematic variation of the DGP’s inputs across simulations. For each parameter configuration (a row in ‘dgp_parameters’), the DGP is called, and the resulting data is passed to the ‘fit’ function.\n\n\n\nA data frame summarizing the diagnostic metrics:\n\n\nrmse\n\n\nRoot mean squared error of the estimates.\n\n\nbias\n\n\nMean bias of the estimates.\n\n\npower\n\n\nProportion of times the null hypothesis is rejected (if ‘p.value’ column exists).\n\n\ncoverage\n\n\nProportion of times the confidence interval covers the true value (if ‘conf.low’ and ‘conf.high’ columns exist).\n\n\nEach row corresponds to a combination of ‘estimator’, ‘term’, and other grouping variables.",
    "crumbs": [
      "Reference",
      "diagnose"
    ]
  },
  {
    "objectID": "man/diagnose.html#diagnose-a-statistical-model-and-data-generating-process",
    "href": "man/diagnose.html#diagnose-a-statistical-model-and-data-generating-process",
    "title": "SimpleDesign",
    "section": "",
    "text": "#’ Diagnose a Statistical Model and Data Generating Process\n\n\n\ndiagnose(dgp, fit, alpha = 0.05, N = 100, dgp_parameters = NULL)\n\n\n\n\n\n\n\ndgp\n\n\nA function that generates a dataset. This function should return a data frame when called, and optionally accept parameters passed via ‘dgp_parameters’.\n\n\n\n\nfit\n\n\nA function that fits the model to the data generated by ‘dgp’. This function should return a data frame with columns including ‘estimator’, ‘term’, ‘estimate’, and optionally ‘p.value’, ‘conf.low’, and ‘conf.high’.\n\n\n\n\nalpha\n\n\nA numeric value between 0 and 1 indicating the significance level for hypothesis tests (default is 0.05).\n\n\n\n\nN\n\n\nAn integer specifying the number of repetitions of the simulation to perform (default is 100).\n\n\n\n\ndgp_parameters\n\n\nAn optional data frame specifying parameter values to be passed to the ‘dgp’ function. Each row corresponds to a parameter configuration for a single DGP run. If ‘NULL’, the ‘dgp’ function is called without additional parameters.\n\n\n\n\ntruth\n\n\nA numeric value representing the true value of the parameter being estimated. This is used to compute bias, RMSE, and coverage.\n\n\n\n\n\n\nThis function evaluates the performance of a statistical model (or estimator) against data generated from a specified data generating process (DGP). It computes various diagnostic metrics, including root mean squared error (RMSE), bias, power, and confidence interval coverage.\nThe function assumes that the ‘fit’ function returns a data frame containing at least the following columns: - ‘estimator’: Identifier for the model or method. - ‘term’: The name of the parameter being estimated. - ‘estimate’: The estimated value of the parameter.\nAdditional columns such as ‘p.value’, ‘conf.low’, and ‘conf.high’ are used for computing power and coverage metrics if they are present.\nThe ‘dgp_parameters’ argument allows for systematic variation of the DGP’s inputs across simulations. For each parameter configuration (a row in ‘dgp_parameters’), the DGP is called, and the resulting data is passed to the ‘fit’ function.\n\n\n\nA data frame summarizing the diagnostic metrics:\n\n\nrmse\n\n\nRoot mean squared error of the estimates.\n\n\nbias\n\n\nMean bias of the estimates.\n\n\npower\n\n\nProportion of times the null hypothesis is rejected (if ‘p.value’ column exists).\n\n\ncoverage\n\n\nProportion of times the confidence interval covers the true value (if ‘conf.low’ and ‘conf.high’ columns exist).\n\n\nEach row corresponds to a combination of ‘estimator’, ‘term’, and other grouping variables.",
    "crumbs": [
      "Reference",
      "diagnose"
    ]
  },
  {
    "objectID": "CITATION.html",
    "href": "CITATION.html",
    "title": "Citation",
    "section": "",
    "text": "Citation\nTo cite package ‘SimpleDesign’ in publications use:\n\nArel-Bundock V (2024). SimpleDesign: DeclareDesign for Dummies Like Me. R package version 1.0, https://github.com/vincentarelbundock/marginaleffects.",
    "crumbs": [
      "Citation"
    ]
  }
]